name: Simple Lambda Deploy

on:
  push:
    paths:
      - 'aws-lambda-jwt/**'
      - 'jwt-validation-lib/**'
      - 'pom.xml'
    branches: [ main ]
  workflow_dispatch:  # Permite execução manual

env:
  JAVA_VERSION: '21'
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: jwt-validator

jobs:
  deploy:
    name: Build and Deploy Lambda
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Install Parent POM
      run: |
        echo "📦 Installing parent POM..."
        mvn clean install -N -B
        echo "✅ Parent POM installed"
        
    - name: Build JWT Validation Library
      run: |
        echo "📦 Building JWT Validation Library..."
        cd jwt-validation-lib
        mvn clean install -DskipTests -B
        echo "✅ JWT Validation Library built"
        
    - name: Build Lambda package
      run: |
        echo "📦 Building Lambda package..."
        cd aws-lambda-jwt
        mvn clean package -DskipTests -B
        
        # Lista os arquivos criados
        echo "📦 Arquivos criados:"
        ls -la target/
        
        # Verifica se o JAR foi criado
        if ls target/aws-lambda-jwt-*.jar 1> /dev/null 2>&1; then
            echo "✅ Lambda JAR criado com sucesso"
        else
            echo "❌ Erro: Lambda JAR não foi criado"
            exit 1
        fi
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to Lambda
      run: |
        cd aws-lambda-jwt
        
        # Encontra o JAR criado (o Maven Shade substitui o original)
        LAMBDA_JAR=$(ls target/aws-lambda-jwt-*.jar 2>/dev/null | head -n 1)
        
        echo "🚀 Deploying: $LAMBDA_JAR"
        
        # Verifica se o arquivo existe
        if [ ! -f "$LAMBDA_JAR" ]; then
            echo "❌ Erro: Arquivo $LAMBDA_JAR não encontrado"
            exit 1
        fi
        
        # Verifica se o JAR tem tamanho adequado (deve ser > 1MB com dependências)
        JAR_SIZE=$(stat -c%s "$LAMBDA_JAR" 2>/dev/null || stat -f%z "$LAMBDA_JAR" 2>/dev/null || echo "0")
        echo "📦 Tamanho do JAR: $(echo "$JAR_SIZE" | awk '{printf "%.1f MB", $1/1024/1024}')"
        
        if [ "$JAR_SIZE" -lt 1000000 ]; then
            echo "⚠️  Aviso: JAR parece pequeno demais, pode estar sem dependências"
        fi
        
        # Update Lambda function code
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://$LAMBDA_JAR
          
        # Wait for update to complete
        aws lambda wait function-updated \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
          
        echo "✅ Lambda deployed successfully!"
        
    - name: Test Lambda function
      run: |
        echo "🧪 Testing Lambda function..."
        
        # Cria arquivo temporário com payload de teste
        echo '{"token": "test-jwt-token", "test": true}' > test-payload.json
        
        # Test with sample JWT usando formato correto
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload file://test-payload.json \
          --cli-binary-format raw-in-base64-out \
          response.json
          
        echo "📋 Lambda response:"
        cat response.json
        
        # Limpa arquivo temporário
        rm test-payload.json
        
    - name: Test Function URL
      run: |
        echo "🌐 Getting Function URL..."
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query 'FunctionUrl' --output text)
          
        echo "🔗 Function URL: $FUNCTION_URL"
        
        # Test via HTTP
        echo "🧪 Testing via HTTP..."
        curl -X POST "$FUNCTION_URL" \
          -H "Content-Type: application/json" \
          -d '{"token": "test-jwt-token", "test": true}' \
          -w "\n📊 Status: %{http_code}\n" \
          || echo "❌ HTTP test completed (may fail with placeholder code)" 