name: Terraform Destroy

on:
  workflow_dispatch:  # Apenas execução manual
    inputs:
      confirm_destroy:
        description: 'Digite "DESTROY" para confirmar a destruição'
        required: true
        type: string
      force_import:
        description: 'Tentar importar recursos existentes antes de destruir?'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: '1.6.0'

jobs:
  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "❌ Confirmação incorreta. Digite exatamente 'DESTROY' para confirmar."
          exit 1
        fi
        echo "✅ Confirmação válida. Procedendo com a destruição..."
    
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Terraform Init
      run: |
        echo "🏗️ Initializing Terraform..."
        cd terraform/lambda-simple
        terraform init
        
    - name: Check AWS Resources
      run: |
        echo "🔍 Verificando recursos AWS existentes..."
        
        echo "=== Lambda Functions ==="
        aws lambda list-functions --query 'Functions[?contains(FunctionName, `jwt`)][FunctionName,Runtime,LastModified]' --output table 2>/dev/null || echo "Nenhuma função Lambda encontrada"
        
        echo -e "\n=== Function URLs ==="
        LAMBDA_FUNCTIONS=$(aws lambda list-functions --query 'Functions[?contains(FunctionName, `jwt`)].FunctionName' --output text 2>/dev/null || echo "")
        for func in $LAMBDA_FUNCTIONS; do
          if [ -n "$func" ]; then
            echo "Verificando Function URL para: $func"
            aws lambda get-function-url-config --function-name "$func" --query '[FunctionUrl,AuthType]' --output text 2>/dev/null || echo "  Sem Function URL"
          fi
        done
        
    - name: Check Terraform State
      run: |
        echo "📊 Verificando estado do Terraform..."
        cd terraform/lambda-simple
        echo "Recursos no estado:"
        terraform state list 2>/dev/null || echo "Estado vazio"
        
    - name: Import Resources (automatic)
      run: |
        echo "📥 Importando recursos existentes automaticamente..."
        cd terraform/lambda-simple
        
        # Sempre tenta importar recursos existentes antes de destruir
        if aws lambda get-function --function-name jwt-validator >/dev/null 2>&1; then
          echo "✅ Função jwt-validator encontrada. Importando..."
          terraform import aws_lambda_function.jwt_lambda jwt-validator 2>/dev/null || echo "Recurso já importado ou falha no import"
          
          # Importar Function URL se existir
          if aws lambda get-function-url-config --function-name jwt-validator >/dev/null 2>&1; then
            echo "✅ Function URL encontrada. Importando..."
            terraform import aws_lambda_function_url.jwt_lambda_url jwt-validator 2>/dev/null || echo "Recurso já importado ou falha no import"
          fi
        else
          echo "⚠️ Função jwt-validator não encontrada"
        fi
        
        echo "Estado após import automático:"
        terraform state list 2>/dev/null || echo "Estado ainda vazio"
        
    - name: Import Resources (if requested)
      if: github.event.inputs.force_import == 'true'
      run: |
        echo "📥 Import adicional solicitado pelo usuário..."
        cd terraform/lambda-simple
        echo "ℹ️ Import automático já foi executado no step anterior"
        
    - name: Terraform Plan Destroy
      run: |
        echo "📋 Planejando destruição..."
        cd terraform/lambda-simple
        terraform plan -destroy -detailed-exitcode
      id: plan_destroy
      continue-on-error: true
      
    - name: Terraform Destroy
      run: |
        echo "🗑️ Destruindo infraestrutura..."
        cd terraform/lambda-simple
        
        # Verifica se há recursos no state
        STATE_RESOURCES=$(terraform state list 2>/dev/null | wc -l)
        
        if [ "$STATE_RESOURCES" -gt 0 ]; then
          echo "🎯 Encontrados $STATE_RESOURCES recursos no state. Destruindo via Terraform..."
          terraform destroy -auto-approve || echo "❌ Falha no Terraform destroy, tentando fallback..."
        fi
        
        # Sempre executa cleanup via AWS CLI como garantia
        echo "🧹 Executando cleanup via AWS CLI como garantia..."
        
        # Remover jwt-validator especificamente
        if aws lambda get-function --function-name jwt-validator >/dev/null 2>&1; then
          echo "🗑️ Removendo Function URL de jwt-validator..."
          aws lambda delete-function-url-config --function-name jwt-validator 2>/dev/null || echo "Function URL não encontrada ou já removida"
          
          echo "🗑️ Removendo Lambda Function jwt-validator..."
          aws lambda delete-function --function-name jwt-validator 2>/dev/null || echo "Função não encontrada ou já removida"
        else
          echo "✅ Função jwt-validator já removida ou não existe"
        fi
        
        # Remover outras funções JWT se existirem
        echo "🔍 Verificando outras funções JWT..."
        OTHER_FUNCTIONS=$(aws lambda list-functions --query 'Functions[?contains(FunctionName, `jwt`)].FunctionName' --output text 2>/dev/null || echo "")
        if [ -n "$OTHER_FUNCTIONS" ]; then
          for func in $OTHER_FUNCTIONS; do
            if [ -n "$func" ] && [ "$func" != "None" ]; then
              echo "🗑️ Removendo função adicional: $func"
              aws lambda delete-function-url-config --function-name "$func" 2>/dev/null || echo "Function URL não encontrada"
              aws lambda delete-function --function-name "$func" 2>/dev/null || echo "Falha ao remover função $func"
            fi
          done
        else
          echo "✅ Nenhuma função JWT adicional encontrada"
        fi
        
        # Limpar state do Terraform
        echo "🧹 Limpando state do Terraform..."
        terraform state list 2>/dev/null | while read resource; do
          if [ -n "$resource" ]; then
            echo "Removendo $resource do state..."
            terraform state rm "$resource" 2>/dev/null || echo "Falha ao remover $resource do state"
          fi
        done
        
    - name: Verify Cleanup
      run: |
        echo "🔍 Verificando se recursos foram removidos..."
        
        REMAINING_FUNCTIONS=$(aws lambda list-functions --query 'Functions[?contains(FunctionName, `jwt`)].FunctionName' --output text 2>/dev/null || echo "")
        
        if [ -z "$REMAINING_FUNCTIONS" ]; then
          echo "✅ Todas as funções Lambda foram removidas com sucesso!"
        else
          echo "❌ Ainda existem funções Lambda:"
          for func in $REMAINING_FUNCTIONS; do
            echo "  - $func"
            aws lambda get-function --function-name "$func" --query 'Configuration.[FunctionName,State,Runtime]' --output table 2>/dev/null || echo "Erro ao obter detalhes"
          done
        fi
        
    - name: Cleanup Summary
      run: |
        echo "## 🗑️ Resumo da Limpeza" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Verificar status final
        REMAINING_FUNCTIONS=$(aws lambda list-functions --query 'Functions[?contains(FunctionName, `jwt`)].FunctionName' --output text 2>/dev/null || echo "")
        
        if [ -z "$REMAINING_FUNCTIONS" ]; then
          echo "✅ **Status**: Todos os recursos foram removidos com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Lambda Functions**: Todas removidas" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Function URLs**: Todas removidas" >> $GITHUB_STEP_SUMMARY
          echo "💰 **Custo**: ~$0/mês (recursos deletados)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Alguns recursos ainda existem" >> $GITHUB_STEP_SUMMARY
          echo "**Funções restantes**: \`$REMAINING_FUNCTIONS\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Próximos Passos" >> $GITHUB_STEP_SUMMARY
          echo "1. Verificar permissões AWS" >> $GITHUB_STEP_SUMMARY
          echo "2. Executar novamente com \`force_import: true\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Verificar dependências no console AWS" >> $GITHUB_STEP_SUMMARY
        fi 