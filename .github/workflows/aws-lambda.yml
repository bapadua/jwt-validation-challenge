name: AWS Lambda CI/CD

on:
  push:
    paths:
      - 'aws-lambda-jwt/**'
      - 'jwt-validation-lib/**'
      - 'pom.xml'
    branches: [ main, develop ]
  pull_request:
    paths:
      - 'aws-lambda-jwt/**'
      - 'jwt-validation-lib/**'
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: -Xmx2048m
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test Lambda Function
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build JWT Validation Library
      run: |
        cd jwt-validation-lib
        mvn clean install -DskipTests -B
        
    - name: Run Lambda tests
      run: |
        cd aws-lambda-jwt
        mvn clean test -B
        
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Lambda Function Tests
        path: aws-lambda-jwt/target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: aws-lambda-jwt/target/site/jacoco/jacoco.xml
        flags: aws-lambda
        name: aws-lambda-coverage

  build:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      lambda-zip: ${{ steps.package.outputs.lambda-zip }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Build JWT Validation Library
      run: |
        cd jwt-validation-lib
        mvn clean install -DskipTests -B
        
    - name: Build Lambda package
      id: package
      run: |
        cd aws-lambda-jwt
        mvn clean package -DskipTests -B
        
        # Criar nome do arquivo com timestamp para versionamento
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        LAMBDA_ZIP="jwt-lambda-${TIMESTAMP}-${COMMIT_SHA}.zip"
        
        # Renomear o arquivo para incluir versioning
        mv target/aws-lambda-jwt-*.jar target/${LAMBDA_ZIP}
        
        echo "lambda-zip=${LAMBDA_ZIP}" >> $GITHUB_OUTPUT
        echo "Lambda package created: ${LAMBDA_ZIP}"
        
    - name: Upload Lambda artifact
      uses: actions/upload-artifact@v4
      with:
        name: lambda-deployment-package
        path: aws-lambda-jwt/target/*.zip
        retention-days: 30
        
    - name: Configure AWS credentials for artifact upload
      if: github.event_name != 'pull_request'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Upload to S3 deployment bucket
      if: github.event_name != 'pull_request'
      run: |
        cd aws-lambda-jwt/target
        aws s3 cp ${{ steps.package.outputs.lambda-zip }} s3://${{ secrets.LAMBDA_DEPLOYMENT_BUCKET }}/artifacts/
        echo "Lambda package uploaded to S3"

  deploy-staging:
    name: Deploy Lambda to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Lambda artifact
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment-package
        path: ./lambda-package
        
    - name: Deploy to Lambda Staging
      run: |
        LAMBDA_ZIP=$(ls ./lambda-package/*.zip | head -n 1)
        echo "Deploying Lambda: $LAMBDA_ZIP"
        
        # Update Lambda function code
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_STAGING }} \
          --zip-file fileb://$LAMBDA_ZIP
          
        # Wait for update to complete
        aws lambda wait function-updated \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_STAGING }}
          
        echo "âœ… Lambda deployed to staging successfully"
        
    - name: Run smoke tests
      run: |
        # Test Lambda function
        aws lambda invoke \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_STAGING }} \
          --payload '{"test": true}' \
          response.json
          
        echo "Lambda response:"
        cat response.json

  deploy-production:
    name: Deploy Lambda to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Lambda artifact
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment-package
        path: ./lambda-package
        
    - name: Deploy to Lambda Production
      run: |
        LAMBDA_ZIP=$(ls ./lambda-package/*.zip | head -n 1)
        echo "Deploying Lambda: $LAMBDA_ZIP"
        
        # Create new version
        RESULT=$(aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }} \
          --zip-file fileb://$LAMBDA_ZIP \
          --publish)
          
        VERSION=$(echo $RESULT | jq -r '.Version')
        echo "New Lambda version: $VERSION"
        
        # Wait for update to complete
        aws lambda wait function-updated \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }}
          
        # Update production alias to new version
        aws lambda update-alias \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }} \
          --name PROD \
          --function-version $VERSION
          
        echo "âœ… Lambda deployed to production with version $VERSION"
        
    - name: Run production smoke tests
      run: |
        # Test Lambda function in production
        aws lambda invoke \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }}:PROD \
          --payload '{"test": true}' \
          prod-response.json
          
        echo "Production Lambda response:"
        cat prod-response.json

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Run performance tests
      run: |
        echo "ðŸš€ Running Lambda performance tests..."
        
        # Test multiple invocations
        for i in {1..10}; do
          START_TIME=$(date +%s%3N)
          
          aws lambda invoke \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_STAGING }} \
            --payload '{"performanceTest": true, "iteration": '$i'}' \
            perf-response-$i.json
            
          END_TIME=$(date +%s%3N)
          DURATION=$((END_TIME - START_TIME))
          
          echo "Invocation $i: ${DURATION}ms"
        done
        
        echo "âœ… Performance tests completed" 