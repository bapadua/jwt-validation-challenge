name: Lambda Deploy

on:
  push:
    paths:
      - 'aws-lambda-jwt/**'
      - 'jwt-validation-lib/**'
      - 'terraform/lambda-simple/**'
      - 'pom.xml'
    branches: [ main ]
  workflow_dispatch:  # Permite execu√ß√£o manual

env:
  JAVA_VERSION: '21'
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: jwt-validator
  TERRAFORM_VERSION: '1.6.0'

jobs:
  deploy:
    name: Deploy Lambda Infrastructure & Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Install Parent POM
      run: |
        echo "üì¶ Instalando Parent POM..."
        mvn clean install -N -B
        echo "‚úÖ Parent POM instalado"
        
    - name: Build JWT Validation Library
      run: |
        echo "üì¶ Construindo JWT Validation Library..."
        cd jwt-validation-lib
        mvn clean install -DskipTests -B
        echo "‚úÖ JWT Validation Library constru√≠da"
        
    - name: Build Lambda package
      run: |
        echo "üì¶ Construindo pacote Lambda..."
        cd aws-lambda-jwt
        mvn clean package -DskipTests -B
        
        # Verifica se o JAR foi criado
        if ls target/aws-lambda-jwt-*.jar 1> /dev/null 2>&1; then
            echo "‚úÖ Lambda JAR criado com sucesso"
            JAR_SIZE=$(stat -c%s target/aws-lambda-jwt-*.jar)
            echo "üì¶ Tamanho do JAR: $(echo "$JAR_SIZE" | awk '{printf "%.1f MB", $1/1024/1024}')"
        else
            echo "‚ùå Erro: Lambda JAR n√£o foi criado"
            exit 1
        fi
        
    - name: Terraform Init
      run: |
        echo "üèóÔ∏è Inicializando Terraform..."
        cd terraform/lambda-simple
        terraform init
        
    - name: Terraform Plan
      run: |
        echo "üìã Planejando mudan√ßas no Terraform..."
        cd terraform/lambda-simple
        terraform plan -detailed-exitcode
      continue-on-error: true
      
    - name: Cleanup existing resources (if any)
      run: |
        echo "üßπ Verificando e removendo recursos existentes..."
        cd terraform/lambda-simple
        
        # Verifica se a fun√ß√£o jwt-validator existe
        if aws lambda get-function --function-name jwt-validator >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Fun√ß√£o jwt-validator j√° existe. Removendo para evitar conflito..."
          
          # Remove Function URL se existir
          aws lambda delete-function-url-config --function-name jwt-validator 2>/dev/null || echo "Function URL n√£o encontrada"
          
          # Remove a fun√ß√£o
          aws lambda delete-function --function-name jwt-validator 2>/dev/null || echo "Falha ao remover fun√ß√£o"
          
          echo "‚úÖ Fun√ß√£o removida com sucesso"
        else
          echo "‚ÑπÔ∏è Fun√ß√£o jwt-validator n√£o existe. Continuando..."
        fi
      
    - name: Terraform Apply
      run: |
        echo "üöÄ Aplicando infraestrutura Terraform..."
        cd terraform/lambda-simple
        terraform apply -auto-approve
        
        # Captura outputs importantes
        echo "üì§ Obtendo outputs do Terraform..."
        FUNCTION_URL=$(terraform output -raw lambda_function_url 2>/dev/null || echo "not_available")
        echo "üîó Function URL: $FUNCTION_URL"
        echo "FUNCTION_URL=$FUNCTION_URL" >> $GITHUB_ENV
        
    - name: Deploy Lambda Code
      run: |
        echo "üì¶ Verificando se precisa fazer deploy do c√≥digo Lambda..."
        
        # Verifica se a fun√ß√£o existe
        if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "‚úÖ Fun√ß√£o Lambda encontrada, fazendo update do c√≥digo..."
            cd aws-lambda-jwt
            
            # Encontra o JAR criado
            LAMBDA_JAR=$(ls target/aws-lambda-jwt-*.jar 2>/dev/null | head -n 1)
            echo "üöÄ Fazendo deploy: $LAMBDA_JAR"
            
            # Update Lambda function code
            aws lambda update-function-code \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --zip-file fileb://$LAMBDA_JAR
              
            # Wait for update to complete
            aws lambda wait function-updated \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
              
            echo "‚úÖ C√≥digo Lambda atualizado com sucesso!"
        else
            echo "‚ÑπÔ∏è Fun√ß√£o Lambda n√£o existe ou foi criada pelo Terraform com o c√≥digo j√° inclu√≠do"
            echo "‚ÑπÔ∏è Pulando update separado do c√≥digo..."
        fi
        
    - name: Test Lambda function
      run: |
        echo "üß™ Testando fun√ß√£o Lambda..."
        
        # Cria arquivo tempor√°rio com payload de teste
        echo '{"token": "eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJTZWVkIjoiNzg0MSIsIk5hbWUiOiJUb25pbmhvIEFyYXVqbyJ9.QY05sIjtrcJnP533kQNk8QXcaleJ1Q01jWY_ZzIZuAg"}' > test-payload.json
        
        # Test with valid JWT
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload file://test-payload.json \
          --cli-binary-format raw-in-base64-out \
          response.json
          
        echo "üìã Resposta do Lambda:"
        cat response.json
        
        # Verifica se a resposta cont√©m "valid"
        if grep -q '"valid"' response.json; then
            echo "‚úÖ Lambda respondendo corretamente"
        else
            echo "‚ö†Ô∏è Resposta do Lambda pode estar inesperada"
        fi
        
        # Limpa arquivo tempor√°rio
        rm test-payload.json
        
    - name: Test Function URL
      run: |
        echo "üåê Testando Function URL..."
        
        if [ "$FUNCTION_URL" != "not_available" ]; then
            echo "üîó Function URL: $FUNCTION_URL"
            
            # Test via HTTP with valid JWT
            echo "üß™ Testando com JWT v√°lido..."
            curl -X POST "$FUNCTION_URL" \
              -H "Content-Type: application/json" \
              -d '{"token": "eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJTZWVkIjoiNzg0MSIsIk5hbWUiOiJUb25pbmhvIEFyYXVqbyJ9.QY05sIjtrcJnP533kQNk8QXcaleJ1Q01jWY_ZzIZuAg"}' \
              -w "\nüìä Status: %{http_code}\n" \
              -s | jq '.' || echo "Resposta n√£o √© JSON"
              
            echo ""
            echo "üß™ Testando com JWT inv√°lido..."
            curl -X POST "$FUNCTION_URL" \
              -H "Content-Type: application/json" \
              -d '{"token": "invalid-token"}' \
              -w "\nüìä Status: %{http_code}\n" \
              -s | jq '.' || echo "Resposta n√£o √© JSON"
        else
            echo "‚ö†Ô∏è Function URL n√£o dispon√≠vel do output do Terraform"
        fi
        
    - name: Deployment Summary
      run: |
        echo "## üéâ Resumo do Deploy" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Infraestrutura**: Criada/Atualizada via Terraform" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Fun√ß√£o Lambda**: Deploy realizado e testada" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Function URL**: Dispon√≠vel para requisi√ß√µes HTTP" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "$FUNCTION_URL" != "not_available" ]; then
            echo "üîó **Function URL**: $FUNCTION_URL" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Comandos de Teste:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo 'curl -X POST '"$FUNCTION_URL"' \' >> $GITHUB_STEP_SUMMARY
        echo '  -H "Content-Type: application/json" \' >> $GITHUB_STEP_SUMMARY
        echo '  -d '\''{"token": "SEU_JWT_TOKEN"}'\''' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    - name: üéâ Success Notification
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        custom_payload: |
          {
            "channel": "#deploys",
            "username": "GitHub Actions",
            "icon_emoji": ":rocket:",
            "attachments": [{
              "color": "good",
              "title": "üéâ JWT Lambda Deploy - SUCCESS",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Commit", 
                  "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                  "short": true
                },
                {
                  "title": "Function URL",
                  "value": "${{ env.FUNCTION_URL }}",
                  "short": false
                }
              ],
              "footer": "Deployed successfully! üöÄ",
              "ts": ${{ github.event.head_commit.timestamp }}
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: ‚ùå Failure Notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        custom_payload: |
          {
            "channel": "#deploys",
            "username": "GitHub Actions",
            "icon_emoji": ":x:",
            "attachments": [{
              "color": "danger",
              "title": "‚ùå JWT Lambda Deploy - FAILED",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch", 
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                  "short": true
                },
                {
                  "title": "Logs",
                  "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>",
                  "short": false
                }
              ],
              "footer": "Deploy failed - check logs for details üîç",
              "ts": ${{ github.event.head_commit.timestamp }}
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 