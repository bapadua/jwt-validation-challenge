name: Backend API CI/CD

on:
  push:
    paths:
      - 'backend-challenge/**'
      - 'jwt-validation-lib/**'
      - 'pom.xml'
    branches: [ main, develop ]
  pull_request:
    paths:
      - 'backend-challenge/**'
      - 'jwt-validation-lib/**'
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: -Xmx2048m
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: jwt-backend-api

jobs:
  test:
    name: Test Backend API
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build JWT Validation Library
      run: |
        cd jwt-validation-lib
        mvn clean install -DskipTests -B
        
    - name: Run Backend API tests
      run: |
        cd backend-challenge
        mvn clean test -B
        
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend API Tests
        path: backend-challenge/target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: backend-challenge/target/site/jacoco/jacoco.xml
        flags: backend-api
        name: backend-api-coverage

  build:
    name: Build Backend API
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Build JWT Validation Library
      run: |
        cd jwt-validation-lib
        mvn clean install -DskipTests -B
        
    - name: Build Backend API
      run: |
        cd backend-challenge
        mvn clean package -DskipTests -B
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-api-jar
        path: backend-challenge/target/*.jar
        retention-days: 30
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: backend-challenge
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "ðŸš€ Deploying Backend API to Staging..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Aqui vocÃª adicionaria os comandos especÃ­ficos para deploy
        # Por exemplo: kubectl, helm, docker-compose, etc.
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "ðŸš€ Deploying Backend API to Production..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Aqui vocÃª adicionaria os comandos especÃ­ficos para deploy
        # Por exemplo: kubectl, helm, docker-compose, etc.

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif' 